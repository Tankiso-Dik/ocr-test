{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///home/tabkiso-mpela/Documents/ocr-test/Main/app/api/gemini/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { SYSTEM_PROMPT } from '../../../lib/systemPrompt';\n\n// Simple wrapper around Google Generative Language API (Gemini)\nexport async function POST(request) {\n  const body = await request.json();\n\n  const {\n    prompt,\n    history = [], // [{ role: 'user'|'assistant', content: string }]\n    model = 'gemini-1.5-flash',\n    temperature = 0.7,\n    top_p = 1,\n    max_tokens = 4096,\n    system = SYSTEM_PROMPT\n  } = body || {};\n\n  if (!prompt) {\n    return NextResponse.json(\n      { reply: '⚠️ No message received.' },\n      { status: 400 }\n    );\n  }\n\n  const apiKey = process.env.GEMINI_API_KEY;\n  if (!apiKey) {\n    console.error('GEMINI_API_KEY is not set.');\n    return NextResponse.json(\n      { reply: '⚠️ Server configuration error: API key missing.' },\n      { status: 500 }\n    );\n  }\n\n  try {\n    const url = `https://generativelanguage.googleapis.com/v1beta/models/${encodeURIComponent(model)}:generateContent?key=${apiKey}`;\n\n    // Map history to Gemini's expected structure\n    const mappedHistory = Array.isArray(history)\n      ? history.map((m) => ({\n          role: m?.role === 'assistant' ? 'model' : 'user',\n          parts: [{ text: String(m?.content ?? '') }]\n        }))\n      : [];\n\n    // Clamp sizes for stability (raised limits)\n    const clampStr = (s, max = 10000) => String(s).slice(0, max);\n    const safePrompt = clampStr(prompt, 30000);\n    const safeMappedHistory = mappedHistory.slice(-50).map((m) => ({\n      role: m.role,\n      parts: [{ text: clampStr(m.parts?.[0]?.text ?? '') }]\n    }));\n\n    const payload = {\n      contents: [\n        ...safeMappedHistory,\n        {\n          role: 'user',\n          parts: [{ text: safePrompt }]\n        }\n      ],\n      systemInstruction: {\n        role: 'system',\n        parts: [{ text: system }]\n      },\n      generationConfig: {\n        temperature: Math.min(Math.max(temperature, 0), 2),\n        topP: Math.min(Math.max(top_p, 0), 1),\n        maxOutputTokens: Math.min(Math.max(max_tokens, 1), 8192)\n      }\n    };\n\n    // Add a timeout to the upstream call\n    const controller = new AbortController();\n    const timeout = setTimeout(() => controller.abort(), 30_000);\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload),\n      signal: controller.signal\n    });\n\n    clearTimeout(timeout);\n\n    const result = await res.json();\n\n    if (!res.ok) {\n      console.error('Gemini error:', res.status, result);\n      const message = result?.error?.message || res.statusText || 'Unknown error';\n      return NextResponse.json(\n        { reply: `⚠️ Gemini error: ${message}` },\n        { status: res.status }\n      );\n    }\n\n    // Extract text from candidates -> content -> parts\n    const candidates = result?.candidates || [];\n    const parts = candidates[0]?.content?.parts || [];\n    const text = parts\n      .map((p) => p?.text)\n      .filter(Boolean)\n      .join('\\n');\n\n    const reply = text || '⚠️ No response from Gemini.';\n    return NextResponse.json({ reply });\n  } catch (err) {\n    console.error('Fetch error:', err);\n    return NextResponse.json(\n      { reply: '⚠️ Error reaching Gemini API.' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}