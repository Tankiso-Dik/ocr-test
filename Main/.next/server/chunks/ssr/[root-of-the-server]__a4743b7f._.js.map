{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/tabkiso-mpela/Documents/ocr-test/Main/lib/contextWindow.js"],"sourcesContent":["// Controls how many prior messages are sent with each request.\n// Tweak this number to balance context vs. token usage.\nexport const MAX_HISTORY_MESSAGES = 12; // last 12 messages (6 user+assistant turns)\n\n"],"names":[],"mappings":"AAAA,+DAA+D;AAC/D,wDAAwD;;;;AACjD,MAAM,uBAAuB,IAAI,4CAA4C","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///home/tabkiso-mpela/Documents/ocr-test/Main/app/chatbot/Chatbot.js"],"sourcesContent":["'use client';\n\nimport { useState, useRef } from 'react';\nimport { MAX_HISTORY_MESSAGES } from '../../lib/contextWindow';\n\nexport default function Chatbot() {\n    const [inputMessage, setInputMessage] = useState('');\n    const [chatbotReply, setChatbotReply] = useState('');\n    // Keep a minimal conversation history for context window\n    // Each item: { role: 'user' | 'assistant', content: string }\n    const [history, setHistory] = useState([]);\n    const [copyBtnActive, setCopyBtnActive] = useState(false);\n    const [copyMaterialBtnActive, setCopyMaterialBtnActive] = useState(false);\n    const [isSending, setIsSending] = useState(false);\n    const fileInputRef = useRef(null);\n\n    const handleSendMessage = async () => {\n        const message = inputMessage.trim();\n\n        // Don't send empty messages\n        if (!message) return;\n\n        setInputMessage(''); // Clear input field\n        if (isSending) return;\n        setIsSending(true);\n\n        try {\n            const res = await fetch(\"/api/gemini\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                    // Send the new user message and recent history\n                    prompt: message,\n                    history: history.slice(-MAX_HISTORY_MESSAGES),\n                }),\n            });\n\n            const data = await res.json();\n            setChatbotReply(data.reply || \"⚠️ No response from AI model.\");\n            // Update local history with this turn\n            const assistantReply = data.reply || '';\n            setHistory((prev) => {\n                const next = [...prev, { role: 'user', content: message }, { role: 'assistant', content: assistantReply }];\n                // Keep only the last N messages\n                return next.slice(-MAX_HISTORY_MESSAGES);\n            });\n            // Keep copy indicator active until user copies the message\n            setCopyBtnActive(true);\n        } catch (err) {\n            console.error(\"Error sending message to Gemini route:\", err);\n            setChatbotReply(\"⚠️ Error connecting to Gemini.\");\n        } finally {\n            setIsSending(false);\n        }\n    };\n\n    const handleFileUpload = async (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        setIsSending(true);\n        setChatbotReply('Extracting text from PDF...');\n\n        try {\n            const fileReader = new FileReader();\n            fileReader.onload = async () => {\n                const pdfContent = fileReader.result;\n                const res = await fetch('/api/ocr', {\n                    method: 'POST',\n                    body: pdfContent,\n                    headers: {\n                        'Content-Type': 'application/pdf'\n                    }\n                });\n\n                const data = await res.json();\n                if (res.ok) {\n                    setChatbotReply(data.text);\n                } else {\n                    setChatbotReply(data.error || 'Failed to extract text.');\n                }\n            };\n            fileReader.readAsArrayBuffer(file);\n        } catch (err) {\n            console.error('Error uploading file:', err);\n            setChatbotReply('⚠️ Error uploading file.');\n        } finally {\n            setIsSending(false);\n        }\n    };\n\n    const onKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            if (!isSending) handleSendMessage();\n        }\n    };\n\n    const handleCopyChatbot = () => {\n        if (!chatbotReply) return;\n        navigator.clipboard.writeText(chatbotReply);\n        // Clear the indicator only after copying\n        setCopyBtnActive(false);\n    };\n\n    const handleCopyMaterial = async () => {\n        try {\n            const res = await fetch('/material');\n            if (!res.ok) throw new Error('Failed to load material');\n            const text = await res.text();\n            await navigator.clipboard.writeText(text || '');\n            setCopyMaterialBtnActive(true);\n            setTimeout(() => setCopyMaterialBtnActive(false), 1500);\n        } catch (e) {\n            console.error('Error copying material:', e);\n        }\n    };\n\n    return (\n        <div className=\"chatbot-container\">\n            <input\n                id=\"chatbot-input\"\n                type=\"text\"\n                autoComplete=\"off\"\n                style={{\n                    width: '150px',\n                    padding: '8px',\n                    borderRadius: '6px',\n                    backgroundColor: '#4d73bf',\n                    border: 'none',\n                    outline: 'none',\n                    color: 'white',\n                    fontSize: '12px',\n                }}\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyDown={onKeyDown}\n                onFocus={(e) => (e.target.placeholder = '')}\n                onBlur={(e) => (e.target.placeholder = '')}\n            />\n\n            <button onClick={handleSendMessage} className=\"chatbot-send-button\" disabled={isSending}>\n                {isSending ? '…' : 'S'}\n            </button>\n            <button\n                id=\"chatbot-copy\"\n                onClick={handleCopyChatbot}\n                className={`chatbot-send-button ${copyBtnActive ? 'active' : ''}`}\n                disabled={!chatbotReply}\n            >\n                C\n            </button>\n            <button\n                id=\"chatbot-copy-material\"\n                onClick={handleCopyMaterial}\n                className={`chatbot-send-button ${copyMaterialBtnActive ? 'active' : ''}`}\n            >\n                C\n            </button>\n            <input\n                type=\"file\"\n                ref={fileInputRef}\n                onChange={handleFileUpload}\n                style={{ display: 'none' }}\n                accept=\".pdf\"\n            />\n            <button onClick={() => fileInputRef.current.click()} className=\"chatbot-send-button\">\n                U\n            </button>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}